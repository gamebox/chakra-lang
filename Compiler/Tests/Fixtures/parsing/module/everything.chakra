= %(
    main,
)

%(
    io,
    add,
    list,
    math,
    format,
    ; Task
) = /stdlib

; Example Type Definition. Stdlib definition of the Actor type
Actor(state, msg) =
    | Actor({ (Capabilities) -> Cmd }, { (state, msg) -> (state, Cmd) })
    | Task({ (Capabilities) -> Cmd })

; Example Type Alias.  A piece of the Stdlib definition of Capabilities and Capability Types
StdioCapability = StdioCapability

Capabilities = %(
    stdio = StdioCapability,
)

TypedFieldList = List(( "", Type ))
TypeConstructor = %( name = "", args = TypedFieldList )
Type =
    | StringType
    | NumberType
    | TupleType(List(Type))
    | ListType(Type)
    | MapType(Type, Type)
    | StructType(TypedFieldList, Bool)
    | FunctionType(TypedFieldList, Type)
    | GenericType("") ; A type variable
    | CustomType("", TypedFieldList)
    | TypeAlias("", Type)

; Person :: %( name: String, age: Num )
Person = %( name = "", age = # )

; How main can be defined using a Type Constructor
main = Task(init)

; This is the typed syntax.  Only functions are typed
init(caps: Capabilities): Cmd =
    io.print(caps.stdio, 1)

;  This just prints a number
;; (Capabilities) -> Cmd
init(caps) =
    io.print(caps.stdio, 1)


init(caps) =
    formatted =
        one = 1
        two = 2
        added = math.add(one, two)
        format.integer(added)

    ; io.print :: { (cap: StdioCapability, text: String) -> Command }
    io.print(caps.stdio, 1);

; = %(
;     number,
;     string,
;     function
; )

; %(
;     add,
; ) = /stdlib

number = 1

string = "Some string"

; Another example of annotating a function head
; function(a: Num): Num = add(number, a)

tuple = (number, string)

struct = %(
    my-number = 3
)

list = [number, 2, 3]

map = %[
    number = string,
    2 = "Another string"
]

lambda =
    { (a) ->
        add(number, a) }

function(x: #): # = add(x, 1)

; using-funcion :: Num
using-function = function(3)

; make :: { (name: String, age: Num) -> Person }
make(name: "", age: #): Person =
    %(
        name,
        age
    )

complex(fn: { ("") -> "" }): (#, "") =
    some-num = 42
    some-string = fn("Hello")
    (some-num, some-string)

more-match(a: ""): # =
    a ?
    | "Hi" -> 1
    | "There" -> 2
    | "Something" -> 3
    | _ -> labmda(4)

; What the hell?
spread(struct: %( num = #, other = "" )): %( num = #, other = "" ) =
    %(
        num = function(struct),
        ...struct
    )

print-typed-field-list(field-list: TypedFieldList, assigment-op: String): String =
    field-list
    > map({ (name, type) -> concat([ name, assignment-op, print(type) ], " ")})
    > concat(", ")

print(type: Type): String =
    type ?
    | StringType -> "str"

    | NumberType -> "num"

    | TupleType(types) ->
        items =
            types
            > map(print)
            > concat(", ")
        
        concat([ "( ", items, " )" ], "")

    | ListType(generic-type) ->
        concat([ "[ ", print(generic-type), " ]" ], "")

    | MapType(key-type, value-type) ->
        concat([ "%[ ", print(key-type), " = ", print(value-type), " ]" ], "")

    | StructType(fields, is-open) ->
        open-sigil =
            is-open ?
            | True -> "..."
            | False -> ""

        pairs = print-typed-field-list(fields, "=")

        format("%%( %s %s)", [ pairs, open-sigil ])

    | FunctionType(args, return) ->
        arg-list =
            args
            > map(compose(snd, print))
            > concat(", ")

        format("{ %s -> %s }", [ arg-list, print(return) ])

    | GenericType(type) -> format("?%s", [ type ])

    | CustomType(name, variables, _) ->
        vars = print-typed-field-list(variables, ":")
        concat([ name, "( ", vars, ")" ], "")
