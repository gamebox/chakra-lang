;; Main Actor for the application.
;; Below is the definition of the module, which describes
;; its API.  Since a module is a struct, it exports a
;; struct of the expected shape for an Actor, normally init
;; and receive functions, but here only init.  That signifies
;; that this is an Actor that will not be sent any messages.
= %(
    init,
)

; This is importing the stdlib's IO library
%( io ) = /stdlib
useless = ./useless

; print is a function that is destructured from the
; library
%( print ) = io
%( a-constant ) = useless


foo = a-constant

;; This is the function called on the Actor when it is
;; first being created.  The Main Actor is passed a struct
;; that includes all of the Capabilities from the system.
init(caps) =
    ; stdio is a capability that allows an Actor to send
    ; data to stdio.  It is destructured here.
    %( stdio ) = caps

    ; The return value of the init function for the Main
    ; Actor should be a state for the Actor (here an empty
    ; tuple - also known as unit) and a list of messages to
    ; send.
    (
        ()
        [
            ; This creates a message that is sent to the root
            ; process that causes the string argument to be
            ; printed to stdio.  Notice that it takes the
            ; capability as an argument to be run. Capabilities
            ; can be passed around, but never recreated.
            print(stdio, "Hello world!")
        ]
    )
